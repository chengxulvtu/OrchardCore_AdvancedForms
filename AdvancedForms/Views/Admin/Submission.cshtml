@model AdvancedForms.ViewModels.AdvancedFormViewModel
@using System.Web
@* Css Files  *@
<style asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
       debug-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" at="Head"></style>
<style asp-src="/AdvancedForms/Styles/formio.full.min.css"></style>
<style asp-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
       debug-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"></style>
<style name="trumbowyg" asp-src="/OrchardCore.Resources/Styles/trumbowyg.min.css"
       debug-src="/OrchardCore.Resources/Styles/trumbowyg.css"></style>
<style asp-src="/AdvancedForms/Styles/AdvancedForms.css"></style>

@* JS Files  *@
<script asp-src="/AdvancedForms/Scripts/formio.full.min.js" at="Head" asp-name="formio.full.min"></script>
<script asp-src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js" at="Head"></script>
<script asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" at="Head"></script>
<script name="trumbowyg" depends-on="admin" asp-src="/OrchardCore.Resources/Scripts/trumbowyg.min.js"
        debug-src="/OrchardCore.Resources/Scripts/trumbowyg.js" at="Foot"></script>
<script asp-src="/AdvancedForms/Scripts/AdvancedForms.js" at="Head" asp-name="AdvancedForms"></script>

<style>
    #main {
        padding-top: 70px;
    }

    #mainNav {
        background-color: #212529 !important;
    }

    #formio button {
        color: #fff;
        background-color: #5bc0de !important;
        border-color: #46b8da !important;
    }

    .print-btn {
        color: #286090 !important;
    }

        .print-btn:hover {
            color: #204d74 !important;
        }

    button:disabled {
        cursor: no-drop;
    }
</style>

<script type='text/javascript' at="Head">
    window.onload = function() {
        Formio.createForm(document.getElementById('formio'),
            //create the form from saved data
            @Html.Raw(Model.Container)

            , { readOnly: true }

        ).then(function(form) {
                //fill form data
                form.submission = {
                    @if (!String.IsNullOrEmpty(Model.SubmissionId))
                    {
                        string submission = "data:" + Html.Raw(Model.Submission);
                        @Html.Raw(submission);
                    }
                };

                // Register for the submit event to get the completed submission.
                form.on('submit', function(submission) {
                    console.log('Submission was made!', submission);

                $.ajax({
                  url: '/AdvancedForms/Entry',
                  method: 'POST',
                  data: {
                      __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val(),
                      submission: JSON.stringify(submission),
                      title: '@Model.Title',
                      id: '@Model.Id',
                      container: document.getElementById('Container').value,
                      header: '@Model.Header',
                      footer: '@Model.Footer',
                      description: '@Model.Description',
                      tag: '@Model.Tag',
                      submissionId: '@Model.SubmissionId',
                      instructions : '@Model.Instructions'
                  },
                  success: function (data) {
                      window.location.replace("/submission-confirmation");
                 },
                  error: function (error) {
                            var errorMsg = @T["'Unable to Save. Try again later.'"];
                      $('<div class="alert alert-danger" role="alert"></div>').text(errorMsg + error.responseText).appendTo($('#advancedForm-errors'));
                        }
                    });

                });
            });
      };

    function printButton() {
        window.open(window.location.href.toLowerCase().replace('/edit/', '/print/').replace('/view/', '/print/'), '_blank');
    };
</script>

@{
    var isEdit = !String.IsNullOrEmpty(Model.Id);
    var createOrEdit = isEdit ? "Edit" : "Create";
}

<h1>@T["Advanced Form Module - Submission Edit"]</h1>
@{
    var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count > 0).ToList();
    if (errors.Count > 0)
    {
        <div class="validation-summary-errors" data-valmsg-summary="true">
            <ul>
                @foreach (var item in errors)
                {
                    <li><span class="field-validation-error">@item.Value.Errors[0].ErrorMessage.ToString()</span></li>
                }
            </ul>
        </div>
    }
}

<div class="validation-summary-errors" data-valmsg-summary="true" id="notifyError">
    <ul>
        <li id="TitleError"><span class="field-validation-error">@T["The Title field is Required."]</span></li>
        <li id="TagError"><span class="field-validation-error">@T["The Tag field is Required."]</span></li>
        <li id="DescriptionError"><span class="field-validation-error">@T["The Description field is required."]</span></li>
        <li id="ContainerError"><span class="field-validation-error">@T["Form components is Required."]</span></li>
    </ul>
</div>

<form enctype="multipart/form-data" asp-action="@createOrEdit" method="post" id="main"></form>

<div>
    <h1 style="font-weight: 600;font-size: 30px;">
        @Model.Title
        @if (Model.EntryType == AdvancedForms.Enums.EntryType.View || Model.EntryType == AdvancedForms.Enums.EntryType.Edit)
        {
            <a class="fa fa-print print-btn" style="font-size:27px;text-decoration:none !important;" onclick="printButton();" href="#"></a>
        }
    </h1>
</div>

<div>
    <label asp-for="Instructions">@T["Instructions"]</label>
    <textarea asp-for="Instructions" class="form-control content-preview-text content-caption-text" form="main"></textarea>
    <span class="hint">@T["The instructions for the form."]</span>
    <br />
    <br />
</div>

<ul class="nav nav-tabs">
    <li><a data-toggle="tab" href="#formPreview">@T["Submission"]</a></li>
    <li><a data-toggle="tab" href="#AdminComments">@T["Admin Comments"]</a></li>
    <li><a data-toggle="tab" href="#formAdminFields">@T["Admin Fields"]</a></li>
    <li><a data-toggle="tab" href="#publicComments">@T["Public Comments"]</a></li>
</ul>

<div class="tab-content">
    <div id="formPreview" class="tab-pane fade in active">
        <br />
        <div id="advancedForm-errors"></div>
        <div id='formio'></div>
    </div>
    <div id="AdminComments" class="tab-pane fade">
        <br />
        <div>
            <textarea asp-for="Header" class="form-control content-preview-text content-caption-text" form="main"></textarea>
            <span class="hint">@T["These commetns are private for admins only."]</span>
            <br />
            <br />
        </div>
    </div>
    <div id="formAdminFields" class="tab-pane fade">
        <br />

    </div>
    <div id="publicComments" class="tab-pane fade">
        <br />

        <div>
            <textarea asp-for="Footer" class="form-control content-preview-text content-caption-text" form="main"></textarea>
            <span class="hint">@T["These comments will be displayed to the submitter and are not private."]</span>
            <br />
            <br />
        </div>
    </div>
</div>
<input type="hidden" asp-for="Container" form="main" />

<br />
<br />

<button form="main" type="submit" name="submit.Publish" class="publish-button btn btn-success" value="submit.Publish">@T["Publish"]</button>
<button form="main" type="submit" name="submit.Save" class="primaryAction btn btn-primary" value="submit.Save">@T["Save Draft"]</button>

@{
    var returnUrl = Context.Request.Query["returnUrl"];
    @if (isEdit && !String.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))
    {
        <a id="button-cancel" href="@returnUrl" class="btn btn-secondary">@T["Cancel"]</a>
    }
}
<input type="hidden" asp-for="Id" form="main" />