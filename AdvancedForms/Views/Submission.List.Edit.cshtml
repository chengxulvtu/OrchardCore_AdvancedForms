@using OrchardCore.Profile.ViewModels
@using OrchardCore.ContentManagement
@using OrchardCore.ContentManagement.Records
@using YesSql
@inject IContentManager ContentManager
@inject ISession _session

@model ProfileViewModel

@{
    var query = _session.Query<ContentItem, ContentItemIndex>();
    var pageOfContentItems = await query.Where(o => o.ContentType == "AdvancedFormSubmissions" && o.Latest).OrderByDescending(o => o.CreatedUtc).ListAsync();
    if (!Model.UserRoles.Any(o => o == "Administrator"))
    {
        pageOfContentItems = pageOfContentItems.Where(o => o.Owner == Model.UserName);
    }

    if (pageOfContentItems.Count() > 0 && !string.IsNullOrEmpty(Model.Title))
    {
        pageOfContentItems = pageOfContentItems.Where(o => o.DisplayText.ToLower().Contains(Model.Title.ToLower()));
    }

    if (pageOfContentItems.Count() > 0 && !string.IsNullOrEmpty(Model.Status) && Model.Status.ToLower() != "all")
    {
        pageOfContentItems = pageOfContentItems.Where(o => o.Content.AdvancedFormSubmissions.Status.Text == Model.Status);
    }

    query = _session.Query<ContentItem, ContentItemIndex>();
    var pageContentStatus = await query.Where(o => o.ContentType == "AdvancedFormStatus" && o.Latest).OrderByDescending(o => o.CreatedUtc).ListAsync();
    List<KeyValue> lstStatus = new List<KeyValue>();
    foreach (var item in pageContentStatus)
    {
        lstStatus.Add(new KeyValue() { Key = item.DisplayText, Value = item.ContentItemId });
    }
    Model.ContentItemSummaries = pageOfContentItems.ToList();
    Model.ListStatus = lstStatus;
}
<style asp-src="/AdvancedForms/Styles/loader.css"></style>
<style>
    .btn-group {
        display: none;
    }
</style>
<h2 style="font-size: 20px;">Submitted Forms</h2>

<div class="panel panel-default">
    <div class="panel-body list-group-item">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <input class="form-control" type="text" placeholder="Filter by Title" id="inputTitle" value="@Model.Title">
                    <div class="input-group-prepend">
                        <button class="input-group-text bg-secondary" id="btnSearch" style="background-color: transparent !important;color: #000 !important;">
                            <i class="fa fa-search" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <select class="form-control" id="selectStatus">
                        <option value="all">All</option>
                        @foreach (var item in Model.ListStatus)
                        {
                            <option value="@item.Value">@item.Key</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>
<hr />

@if (Model.ContentItemSummaries.Count > 0)
{
    <ul class="list-group">
        @foreach (var contentItemSummary in Model.ContentItemSummaries)
        {
            ContentItem contentItem = contentItemSummary;
            var hasPublished = await ContentManager.HasPublishedVersionAsync(contentItem);
            var hasDraft = contentItem.HasDraft();
            string action = contentItem.Content.AutoroutePart.Path != null ? contentItem.Content.AutoroutePart.Path.ToString().Split("/")[1] : null;
            if (action == null)
            {
                return;
            }
            string status = string.Empty;
            dynamic selectedContent = await ContentManager.GetAsync(contentItem.Content.AdvancedFormSubmissions.Status.Text.ToString(), VersionOptions.Published);
            if (selectedContent == null)
            {
                selectedContent = await ContentManager.GetAsync(contentItem.Content.AdvancedFormSubmissions.Status.Text.ToString(), VersionOptions.DraftRequired);
            }
            if (selectedContent != null)
            {
                status = selectedContent.DisplayText;
            }


            <li class="list-group-item tedt">
                <div class="properties">
                    <div class="related float-right">
                        <a href="@Url.Action("Edit", action, new { area = "AdvancedForms" })/@contentItem.ContentItemId?returnUrl=@FullRequestPath" class="btn btn-primary btn-sm">@T["Edit"]</a>
                        @if (hasPublished)
                        {
                            <a href="@Url.Action("View", action, new { area = "AdvancedForms" })/@contentItem.ContentItemId" class="btn btn-success btn-sm" itemprop="">@T["View"]</a>
                        }
                    </div>
                    <a href="@Url.Action("Edit", action, new { area = "AdvancedForms" })/@contentItem.ContentItemId">@action.Replace("-", " ")</a>
                    <br />
                    <div class="metadata">
                        @if (hasPublished)
                        {
                            <span class="badge badge-success" title="@T["Published"]">
                                <i class="fa fa-check" aria-hidden="true"></i> @T["Published"]
                            </span>
                        }
                        @if (hasDraft)
                        {
                            <span class="badge badge-primary" title="@T["Draft"]">
                                <i class="fa fa-pencil" aria-hidden="true"></i> @T["Draft"]
                            </span>
                        }
                        <span class="badge badge-secondary" title="@T[@status]" style="color:#fff;"> @T["Status - " + @status]</span>
                        <div>
                            <span class="hint">@T["Last modified {0} by {1}", (object)(await DisplayAsync(await New.TimeSpan(Utc: contentItem.ModifiedUtc))), contentItem.Author]</span>
                        </div>
                    </div>
                </div>
            </li>
        }
    </ul>
}
else
{
    <div class="alert alert-info">
        @T["No result found."]
    </div>
}
<script asp-src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js" at="Head"></script>
<script type="text/javascript">
    $("#selectStatus").change(function () {
        loadData();
    });

    $("#btnSearch").click(function () {
        loadData();
    });

    $('#inputTitle').keypress(function (event) {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == '13') {
            loadData();
        }
    });

    function loadData() {
        $('.loading').show();
        var title = $("#inputTitle").val();
        var status = $("#selectStatus").val();
        window.location.href = window.location.origin + window.location.pathname + "?Title=" + title + "&Status=" + status;
    }
</script>

@if (!string.IsNullOrEmpty(Model.Status))
{
    <script>
        $("#selectStatus").val("@Model.Status");
    </script>
}

<div class="loading">@T["Loading"]&#8230;</div>
<script>
    window.onload = function () {
        $('.loading').hide();
    }
</script>