@using OrchardCore.ContentManagement
@inject IContentManager ContentManager
@{
    ContentItem contentItem = Model.ContentItem;
    var hasPublished = await ContentManager.HasPublishedVersionAsync(contentItem);
    var hasDraft = contentItem.HasDraft();
    string action = contentItem.Content.AutoroutePart.Path.ToString().Split("/")[1];
    string status = string.Empty;
    dynamic selectedContent = await ContentManager.GetAsync(contentItem.Content.AdvancedFormSubmissions.Status.Text.ToString(), VersionOptions.Published);
    if (selectedContent == null)
    {
        selectedContent = await ContentManager.GetAsync(contentItem.Content.AdvancedFormSubmissions.Status.Text.ToString(), VersionOptions.DraftRequired);
    }
    if (selectedContent != null)
    {
        status = selectedContent.DisplayText;
    }
}

<li class="list-group-item tedt">
    <div class="properties">
        <div class="related float-right">
            <a href="/AdvancedForms/@action/Edit/@contentItem.ContentItemId?returnUrl=@FullRequestPath" class="btn btn-primary btn-sm">@T["Edit"]</a>
            @if (hasPublished)
            {
                <a href="/@contentItem.Content.AutoroutePart.Path" class="btn btn-success btn-sm" itemprop="">@T["View"]</a>
            }
        </div>
        <div class="custom-control custom-checkbox float-left">
            <input type="checkbox" class="custom-control-input" value="@contentItem.Id" name="itemIds" id="itemIds-@contentItem.Id" />
            <label class="custom-control-label" for="itemIds-@contentItem.Id">&nbsp;</label>
        </div>
        <a href="/AdvancedForms/@action/Edit/@contentItem.ContentItemId">@action.Replace("-", " ")</a> - <small class="text-muted">@contentItem.ContentType</small> <br />
        <div class="metadata">
            @if (hasPublished)
            {
                <span class="badge badge-success" title="@T["Published"]">
                    <i class="fa fa-check" aria-hidden="true"></i> @T["Published"]
                </span>
            }
            @if (hasDraft)
            {
                <span class="badge badge-primary" title="@T["Draft"]">
                    <i class="fa fa-pencil" aria-hidden="true"></i> @T["Draft"]
                </span>
            }
                <span class="badge badge-warning" title="@T["Status"]" style="color:#fff;"> @status </span>
            <div>
                <span class="hint">@T["Last modified {0} by {1}", (object)(await DisplayAsync(await New.TimeSpan(Utc: contentItem.ModifiedUtc))), contentItem.Author]</span>
            </div>
        </div>
    </div>
</li>