@model AdvancedForms.ViewModels.AdvancedFormViewModel
@using System.Web
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@* Css Files  *@
<style asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
       debug-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" at="Head"></style>
<style asp-src="/AdvancedForms/Styles/formio.full.min.css"></style>
<style asp-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
       debug-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"></style>
<style name="trumbowyg" asp-src="/OrchardCore.Resources/Styles/trumbowyg.min.css"
       debug-src="/OrchardCore.Resources/Styles/trumbowyg.css"></style>
<style asp-src="/AdvancedForms/Styles/AdvancedForms.css"></style>

@* JS Files  *@
<script asp-src="/AdvancedForms/Scripts/formio.full.min.js" at="Head" asp-name="formio.full.min"></script>
<script asp-src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js" at="Head"></script>
<script asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" at="Head"></script>
<script name="trumbowyg" depends-on="admin" asp-src="/OrchardCore.Resources/Scripts/trumbowyg.min.js"
        debug-src="/OrchardCore.Resources/Scripts/trumbowyg.js" at="Foot"></script>


<script asp-src="~/OrchardCore.ContentFields/Scripts/contentPicker.js" asp-name="contentPicker" at="Foot" depends-on="vuejs, vuemultiselect"></script>
<style asp-src="~/OrchardCore.ContentFields/Styles/contentPicker.min.css" debug-src="~/OrchardCore.ContentFields/Styles/contentPicker.css"></style>
<script asp-src="https://vuejs.org/js/vue.min.js" debug-src="https://vuejs.org/js/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.js" asp-name="vuemultiselect" at="Foot"></script>
<style asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css"></style>
<script asp-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.min.js" debug-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.js" asp-name="sortable" at="Foot"></script>
<script asp-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.min.js" debug-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.js" asp-name="vuedraggable" depends-on="vuejs, sortable" at="Foot"></script>


<style>
    /*#main {
        padding-top: 70px;
    }*/

    #mainNav {
        background-color: #212529 !important;
    }

    #formio button {
        color: #fff;
        background-color: #5bc0de !important;
        border-color: #46b8da !important;
    }

    .print-btn {
        color: #286090 !important;
    }

        .print-btn:hover {
            color: #204d74 !important;
        }

    button:disabled {
        cursor: no-drop;
    }

    label {
        margin-bottom: 0px !important;
        padding-bottom: 10px;
    }

    div > label {
        padding-bottom: 0px;
    }

    .btn-group-sm > .btn, .btn-sm {
        padding: 2px 8px;
    }

    .trumbowyg-box, .trumbowyg-editor {
        min-height: 100px;
    }
</style>

<script type='text/javascript' at="Head">
    window.onload = function() {
        Formio.createForm(document.getElementById('formio'),
            //create the form from saved data
            @Html.Raw(Model.Container)

            , { readOnly: true }

        ).then(function(form) {
                //fill form data
                form.submission = {
                    @if (!String.IsNullOrEmpty(Model.SubmissionId))
                    {
                        string submission = "data:" + Html.Raw(Model.Submission);
                        @Html.Raw(submission);
                    }
                };

                // Register for the submit event to get the completed submission.
                form.on('submit', function(submission) {
                    console.log('No changes allowed', submission);
                });
            });
    };

    function onSubmissionFormSubmit(form) {
        debugger;
        var isValidate = true;
        if (form.Status == undefined || form.Status.value == '') {
            isValidate = false;
            document.getElementById("StatusError").style.display = "list-item";
            document.getElementById("multiselect_Div").classList.add("editor-error");
        } else {
            document.getElementById("StatusError").style.display = "none";
            document.getElementById("multiselect_Div").classList.remove("editor-error");
        }

        document.documentElement.scrollTop = 0;
        if (isValidate) {
            document.getElementById("notifyError").style.display = "none";
        } else {
            document.getElementById("notifyError").style.display = "block";
        }
        return isValidate;
    }

</script>

<div class="validation-summary-errors" data-valmsg-summary="true" id="notifyError">
    <ul>
        <li id="StatusError"><span class="field-validation-error">@T["The Status field is Required."]</span></li>
    </ul>
</div>

<div>
    <h1 style="font-weight: 600;font-size: 30px;">
        @Model.Title @T[" - Submission Edit"]
    </h1>
</div>
<hr />
@{
    var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count > 0).ToList();
    if (errors.Count > 0)
    {
        <div class="validation-summary-errors" data-valmsg-summary="true">
            <ul>
                @foreach (var item in errors)
                {
                    <li><span class="field-validation-error">@item.Value.Errors[0].ErrorMessage.ToString()</span></li>
                }
            </ul>
        </div>
    }
}

<form enctype="multipart/form-data" onsubmit="return onSubmissionFormSubmit(this)" method="post" id="main"></form>

<div>
    <label @*asp-for="Author" *@>@T["Author"]</label> : <label><strong>@Model.Owner</strong> </label><br />
    <label @*asp-for="CreatedUtc" *@>@T["Created Date"]</label> :
    @if (Model.ModifiedUtc.HasValue)
    {
        <label>
            <strong>
                @await DisplayAsync(await New.DateTime(Utc: Model.ModifiedUtc.Value))
            </strong>
        </label>
    }<br />
    <br />
</div>


<div style="margin-bottom: 2rem;">
    <label asp-for="Title">@T["Status"]</label>
    <div id="ContentPicker_PickerStatus_Status" class="content-picker-default">
        <fieldset class="">
            <ul class="list-group col-xl-12 content-picker-default__list" v-show="arrayOfItems.length" v-cloak>
                <draggable v-model="arrayOfItems">
                    <li v-for="(item, i) in arrayOfItems"
                        class="list-group-item content-picker-default__list-item"
                        :key="item.contentItemId">
                        {{ item.displayText }} <span v-show="!item.hasPublished" class="text-muted small">(@T["Not published"])</span>
                        <input asp-for="Status" type="hidden" v-model="item.contentItemId" form="main" />
                        <div class="btn-group btn-group-sm float-right" role="group">
                            <button v-on:click="remove(item)" type="button" class="btn btn-secondary content-picker-default__list-item__delete"><i class="fa fa-trash fa-sm" aria-hidden="true"></i></button>
                        </div>
                    </li>
                </draggable>
            </ul>
        </fieldset>
        <fieldset class="row">
            <div class="col-xl-12">
                <div id="multiselect_Div">
                    <vue-multiselect v-model="value" :options="options" track-by="contentItemId"
                                     label="displayText" placeholder="@T["Type to search"]"
                                     @@search-change="asyncFind" @@select="onSelect"
                                     :searchable="true" :close-on-select="true" :reset-after="true"
                                     :show-labels="true"
                                     :disabled="isDisabled"
                                     select-label="@T["Select"]" deselect-label="@T["Remove"]">
                        <template slot="option" slot-scope="props">
                            <div v-cloak><span>{{ props.option.displayText }}</span><span class="small ml-2" v-show="!props.option.hasPublished">(@T["Not published"])</span></div>
                        </template>
                    </vue-multiselect>
                </div>
            </div>
            <div class="col-xl-12">
                <span class="hint">@T["The Status of the form."]</span>
            </div>
        </fieldset>
    </div>
</div>



<ul class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#formPreview" class="active show">@T["Submission"]</a></li>
    <li><a data-toggle="tab" onclick="GetAdminComments()" href="#AdminComments">@T["Admin Comments"]</a></li>
    <li><a data-toggle="tab" href="#formAdminFields">@T["Admin Fields"]</a></li>
    <li><a data-toggle="tab" onclick="GetPublicComments()" href="#publicComments">@T["Public Comments"]</a></li>
</ul>

<div class="tab-content">
    <div id="formPreview" class="tab-pane fade in active">
        <br />
        <div id="advancedForm-errors"></div>
        <div id='formio'></div>
    </div>
    <div id="AdminComments" class="tab-pane fade">
        <br />
        <div id="AdminCommentsPanels">
        </div>
        <br />
        <div>
            <textarea id="AdminComment" class="form-control content-preview-text content-caption-text"></textarea>
            <span class="hint">@T["These comments are private for admins only."]</span><br />
            <button class="publish-button btn btn-success" onclick="submitAdminComment()">@T["Save"]</button>
        </div>
        <br />
        <br />
        <hr />
    </div>
    <div id="formAdminFields" class="tab-pane fade">
        <br />
        @T["Admin Fields Coming Soon"]
        <br />
    </div>
    <div id="publicComments" class="tab-pane fade">
        <br />
        <div id="PublicCommentsPanels">
        </div>
        <br />
        <div>
            <textarea id="PublicComment" class="form-control content-preview-text content-caption-text"></textarea>
            <span class="hint">@T["These comments will be displayed to the submitter and are not private."]</span> <br/>
            <button class="publish-button btn btn-success" onclick="submitPublicComment()">@T["Save"]</button>
        </div>
        <br />
        <br />
        <hr />
    </div>
</div>
<input type="hidden" asp-for="Id" form="main" />
<input type="hidden" asp-for="Owner" form="main" />
<input type="hidden" asp-for="Title" form="main" />
<input type="hidden" asp-for="Type" form="main" />
<input type="hidden" asp-for="Header" form="main" />
<input type="hidden" asp-for="Footer" form="main" />
<input type="hidden" asp-for="Container" form="main" />
<input type="hidden" asp-for="Description" form="main" />
<input type="hidden" asp-for="Instructions" form="main" />
<input type="hidden" asp-for="Container" form="main" />
<input type="hidden" asp-for="SubmissionId" form="main" />
<input type="hidden" asp-for="Submission" form="main" />
<input type="hidden" asp-for="Metadata" form="main" />
<input type="hidden" asp-for="EntryType" form="main" />
<br />
<br />

<button form="main" type="submit" name="submit.Publish" class="publish-button btn btn-success" value="submit.Publish">@T["Publish"]</button>
<button form="main" type="submit" name="submit.Save" class="primaryAction btn btn-primary" value="submit.Save">@T["Save Draft"]</button>

@{
    var returnUrl = Context.Request.Query["returnUrl"];
    <a id="button-cancel" href="@returnUrl" class="btn btn-secondary">@T["Cancel"]</a>
}
<input type="hidden" asp-for="Id" form="main" />

@if (Model.SelectedItems != null && Model.SelectedItems.Count > 0)
{
    var selectedItems = Html.Raw(JsonConvert.SerializeObject(Model.SelectedItems, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }));
    <script at="Foot">
        initializeContentPickerFieldEditor('ContentPicker_PickerStatus_Status', @selectedItems, '', 'PickerStatus', 'Status', false);
    </script>
}
else
{
    <script at="Foot">
        initializeContentPickerFieldEditor('ContentPicker_PickerStatus_Status', [], '', 'PickerStatus', 'Status', false);
    </script>
}


<script type="text/javascript">
    $(function () {
        renderCommentEditors();
    });

    function renderCommentEditors() {
        $('#AdminComment').trumbowyg();
        $('#PublicComment').trumbowyg();
    }

    function clearEditors() {
        $('#AdminComment').trumbowyg('empty');
        $('#PublicComment').trumbowyg('empty');
    }

    function submitAdminComment() {
        if ($("#AdminComment")[0].value == null) {
            return;
        }
        $.ajax({
        url: '/AdvancedForms/SaveAdminComment',
        method: 'POST',
        data: {
            __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val(),
            id: '@Model.Id',
            comment: $("#AdminComment")[0].value
        },
        success: function (data) {
            clearEditors();
            GetAdminComments();
        },
        error: function (error) {
                var errorMsg = @T["'Unable to Save. Try again later.'"];
            $('<div class="alert alert-danger" role="alert"></div>').text(errorMsg + error.responseText).appendTo($('#advancedForm-errors'));
            }
        });
    }

    function submitPublicComment() {
        if ($("#PublicComment")[0].value == null) {
            return;
        }
        $.ajax({
        url: '/AdvancedForms/SavePublicComment',
        method: 'POST',
        data: {
            __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val(),
            id: '@Model.Id',
            comment: $("#PublicComment")[0].value
        },
        success: function (data) {
            clearEditors();
            GetPublicComments();
        },
        error: function (error) {
                var errorMsg = @T["'Unable to Save. Try again later.'"];
            $('<div class="alert alert-danger" role="alert"></div>').text(errorMsg + error.responseText).appendTo($('#advancedForm-errors'));
            }
        });
    }

    function GetAdminComments() {
        $.ajax({
        url: '/AdvancedForms/GetAdminComments',
        method: 'GET',
        data: {
            id: '@Model.Id'
        },
        success: function (data) {
            if (data != null) {
                var comments = "";
                var date = new Date();
                $.each(data, function (index, value) {
                    date = new Date(value.CreatedUtc);
                    comments += '<div class="panel panel-default">';
                    comments += '<div class="panel-heading"><b>' + value.Owner + '</b> ' + date.getMonth() + '/' + date.getDate() + '/' + date.getFullYear() + ' ' + date.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }) + '</div>';
                    comments += '<div class="panel-body">' + value.AdminComment+'</div>';
                    comments += '</div>';
                    console.log(value);
                });
                $("#AdminCommentsPanels").html(comments);
            }
        },
        error: function (error) {
                var errorMsg = @T["'Unable to Save. Try again later.'"];
            $('<div class="alert alert-danger" role="alert"></div>').text(errorMsg + error.responseText).appendTo($('#advancedForm-errors'));
            }
        });
    }

    function GetPublicComments() {
        $.ajax({
        url: '/AdvancedForms/GetPublicComments',
        method: 'GET',
        data: {
            id: '@Model.Id'
        },
        success: function (data) {
            if (data != null) {
                var comments = "";
                var date = new Date();
                $.each(data, function (index, value) {
                    date = new Date(value.CreatedUtc);
                    comments += '<div class="panel panel-default">';
                    comments += '<div class="panel-heading"><b>' + value.Owner + '</b> ' + date.getMonth() + '/' + date.getDate() + '/' + date.getFullYear() + ' ' + date.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })+'</div>';
                    comments += '<div class="panel-body">' + value.AdminComment+'</div>';
                    comments += '</div>';
                    console.log(value);
                });
                $("#PublicCommentsPanels").html(comments);
            }
        },
        error: function (error) {
                var errorMsg = @T["'Unable to Save. Try again later.'"];
            $('<div class="alert alert-danger" role="alert"></div>').text(errorMsg + error.responseText).appendTo($('#advancedForm-errors'));
            }
        });
    }
</script>