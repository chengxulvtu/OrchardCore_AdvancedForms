@model AdvancedForms.ViewModels.AdvancedFormViewModel
@using System.Web
@using Newtonsoft.Json;
@using Common.ViewModels;
@using Newtonsoft.Json.Serialization;
@* Css Files  *@
<style asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
       debug-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" at="Head"></style>
<style asp-src="/AdvancedForms/Styles/formio.full.min.css"></style>
<style asp-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
       debug-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"></style>
<style asp-src="/AdvancedForms/Styles/AdvancedForms.css"></style>

@* JS Files  *@
<script asp-src="/AdvancedForms/Scripts/formio.full.min.js" at="Head" asp-name="formio.full.min"></script>
<script asp-src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js" at="Head"></script>
<script asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" at="Head"></script>
<script asp-src="~/OrchardCore.ContentFields/Scripts/contentPicker.js" asp-name="contentPicker" at="Foot" depends-on="vuejs, vuemultiselect"></script>
<style asp-src="~/OrchardCore.ContentFields/Styles/contentPicker.min.css" debug-src="~/OrchardCore.ContentFields/Styles/contentPicker.css"></style>
<script asp-src="https://vuejs.org/js/vue.min.js" debug-src="https://vuejs.org/js/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.js" asp-name="vuemultiselect" at="Foot"></script>
<style asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css"></style>
<script asp-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.min.js" debug-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.js" asp-name="sortable" at="Foot"></script>
<script asp-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.min.js" debug-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.js" asp-name="vuedraggable" depends-on="vuejs, sortable" at="Foot"></script>
<script asp-src="~/OrchardCore.Media/Scripts/media.js" asp-name="media" at="Foot" depends-on="admin, vuejs, sortable, vuedraggable"></script>
<style asp-src="~/OrchardCore.Media/Styles/media.min.css" debug-src="~/OrchardCore.Media/Styles/media.css"></style>
<script asp-src="https://vuejs.org/js/vue.min.js" debug-src="https://vuejs.org/js/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="/AdvancedForms/Scripts/jquery.fileupload.js" at="Foot" asp-name="advancedforms.fileupload"></script>
<script asp-src="/AdvancedForms/Scripts/urlConfig.js" at="Head" asp-name="advancedforms.urlConfig"></script>
<script at="Head">
    if (typeof urlConfig !== undefined) {
        urlConfig.Entry = '@Url.Action("Entry", "AdvancedForms", new { area = "AdvancedForms" })';
        urlConfig.Upload = '@Url.Action("Upload", "Admin", new { area = "OrchardCore.Media" })';
        urlConfig.MoveMedia = '@Url.Action("MoveMedia", "Admin", new { area = "OrchardCore.Media" })';
        urlConfig.GetPublicComments = '@Url.Action("GetPublicComments", "AdvancedForms", new { area = "AdvancedForms" })';
        urlConfig.GetAdminComments = '@Url.Action("GetAdminComments", "Admin", new { area = "AdvancedForms" })';
        urlConfig.GetGraphData = '@Url.Action("GetGraphData", "Admin", new { area = "AdvancedForms" })';
        urlConfig.MakePublicComment = '@Url.Action("MakePublicComment", "Admin", new { area = "AdvancedForms" })';
        urlConfig.SaveUpdateAdminComment = '@Url.Action("SaveAdminComment", "Admin", new { area = "AdvancedForms" })';
        urlConfig.SaveUpdatePublicComment = '@Url.Action("SavePublicComment", "AdvancedForms", new { area = "AdvancedForms" })';
    }
</script>
<script asp-src="/AdvancedForms/Scripts/Submission.js" at="Foot" asp-name="advancedforms.submission"></script>


<style name="trumbowyg" asp-src="/OrchardCore.Resources/Styles/trumbowyg.min.css"
       debug-src="/OrchardCore.Resources/Styles/trumbowyg.css"></style>
<script asp-src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js" at="Head"></script>
<script name="trumbowyg" depends-on="admin" asp-src="/OrchardCore.Resources/Scripts/trumbowyg.min.js"
        debug-src="/OrchardCore.Resources/Scripts/trumbowyg.js" at="Head"></script>

<script at="Foot" name="trumbowyg" asp-src="/OrchardCore.Resources/Scripts/jquery.js" type="text/javascript"></script>
<script at="Foot" name="trumbowyg" asp-src="/OrchardCore.Resources/Scripts/jquery-ui.js" type="text/javascript"></script>
<script at="Foot" name="trumbowyg" asp-src="/TheAdmin/Scripts/TheAdmin.js" type="text/javascript"></script>


<style>
    #fileupload {
        display: none;
    }
</style>

@{
    var standardAdminComp = "{components:[{type:well }]}";
}

<script type='text/javascript' at="Foot">
    window.onload = function () {
        let well = "well";
        Formio.createForm(document.getElementById('formio'),
            @Html.Raw(Model.Container), { readOnly: true }
        ).then(function(form) {
            form.submission = {
                @if (!String.IsNullOrEmpty(Model.SubmissionId))
                {
                    string submission = "data:" + Html.Raw(Model.Submission);
                    @Html.Raw(submission);
                }
            };
            form.on('submit', function(submission) {
                console.log('No changes allowed', submission);
            });
            });

        Formio.createForm(document.getElementById('builderAdminFields'),
        @if (String.IsNullOrEmpty(Model.AdminContainer)){@standardAdminComp}
         else{@Html.Raw(Model.AdminContainer)}
        ).then(function (form) {
            form.submission = {
                @if (!String.IsNullOrEmpty(Model.SubmissionId) && !String.IsNullOrEmpty(Model.AdminSubmission))
                {
                    string adminsubmission = "data:" + Html.Raw(Model.AdminSubmission);
                    @Html.Raw(adminsubmission);
                }
            };
            builderAdminFieldsChange(form);
            });

    };
    setCurrentUser('@Model.SubmissionId', '@User.Identity.Name', true);
</script>

<div class="validation-summary-errors" data-valmsg-summary="true" id="notifyError">
    <ul>
        <li id="StatusError"><span class="field-validation-error">@T["The Status field is Required."]</span></li>
    </ul>
</div>

<div>
    <h1 style="font-weight: 600;font-size: 30px;">
        @Model.Title @T[" - Submission Edit"]
    </h1>
</div>
<hr />
@{
    var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count > 0).ToList();
    if (errors.Count > 0)
    {
        <div class="validation-summary-errors" data-valmsg-summary="true">
            <ul>
                @foreach (var item in errors)
                {
                    <li><span class="field-validation-error">@item.Value.Errors[0].ErrorMessage.ToString()</span></li>
                }
            </ul>
        </div>
    }
}

<form enctype="multipart/form-data" onsubmit="return onSubmissionFormSubmit(this)" method="post" id="main"></form>

<div>
    <label @*asp-for="Author" *@>@T["Author"]</label> : <label><strong>@Model.Owner</strong> </label><br />
    <label @*asp-for="CreatedUtc" *@>@T["Created Date"]</label> :
    @if (Model.CreatedUtc.HasValue)
    {
        <label>
            <strong>
                @await DisplayAsync(await New.TimeSpan(Utc: Model.CreatedUtc.Value))
            </strong>
        </label>
    }<br />
    <br />
</div>


<div style="margin-bottom: 2rem;">
    <label asp-for="Title">@T["Status"]</label>
    <div id="ContentPicker_PickerAdvancedFormStatus_Status" class="content-picker-default">
        <fieldset class="">
            <ul class="list-group col-xl-12 content-picker-default__list" v-show="arrayOfItems.length" v-cloak>
                <draggable v-model="arrayOfItems">
                    <li v-for="(item, i) in arrayOfItems"
                        class="list-group-item content-picker-default__list-item"
                        :key="item.contentItemId">
                        {{ item.displayText }} <span v-show="!item.hasPublished" class="text-muted small">(@T["Not published"])</span>
                        <input asp-for="Status" type="hidden" v-model="item.contentItemId" form="main" />
                        <div class="btn-group btn-group-sm float-right" role="group">
                            <button v-on:click="remove(item)" type="button" class="btn btn-secondary content-picker-default__list-item__delete"><i class="fa fa-trash fa-sm" aria-hidden="true"></i></button>
                        </div>
                    </li>
                </draggable>
            </ul>
        </fieldset>
        <fieldset class="row">
            <div class="col-xl-12">
                <div id="multiselect_Div">
                    <vue-multiselect v-model="value" :options="options" track-by="contentItemId"
                                     label="displayText" placeholder="@T["Type to search"]"
                                     @@search-change="asyncFind" @@select="onSelect"
                                     :searchable="true" :close-on-select="true" :reset-after="true"
                                     :show-labels="true"
                                     :disabled="isDisabled"
                                     select-label="@T["Select"]" deselect-label="@T["Remove"]">
                        <template slot="option" slot-scope="props">
                            <div v-cloak><span>{{ props.option.displayText }}</span><span class="small ml-2" v-show="!props.option.hasPublished">(@T["Not published"])</span></div>
                        </template>
                    </vue-multiselect>
                </div>
            </div>
            <div class="col-xl-12">
                <span class="hint">@T["The Status of the form."]</span>
            </div>
        </fieldset>
    </div>
</div>

<ul class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#formPreview" class="active show">@T["Submission"]</a></li>
    <li><a data-toggle="tab" onclick="GetAdminComments('@Model.SubmissionId')" href="#AdminComments">@T["Admin Comments"]</a></li>
    <li><a data-toggle="tab" href="#formAdminFields">@T["Admin Fields"]</a></li>
    <li><a data-toggle="tab" onclick="GetPublicComments('@Model.SubmissionId')" href="#publicComments">@T["Public Comments"]</a></li>
</ul>

<div class="tab-content" style="border: 1px solid #ddd;padding: 15px;">
    <div id="formPreview" class="tab-pane fade in active">
        <br />
        <div id="advancedForm-errors"></div>
        <div id='formio'></div>
    </div>
    <div id="AdminComments" class="tab-pane fade">
        <br />
        <div id="AdminCommentsPanels">
        </div>
        <br />
        <div>
            @await Component.InvokeAsync("CommentField", new CommentFieldViewModel()
           {
               AttachFileHint = T["Attach a file with comment"], AttachmentID = "adminAttachment", AttachRemoveHint = T["Remove Attachment"], AttachRemoveID = "adminAttachmentRemove",
               Editor = Model.AdminEditor, ErrorHint = T["Admin comment required."], ErrorMessageClass = "errorMessageAdmin", FileUploadID = "fileuploadAdmin", EditorHint = T["These comments are private for admins only."]
           })
            <button class="publish-button btn btn-success" onclick="submitAdminComment('@Model.SubmissionId')">@T["Save"]</button>
        </div>
        <br />
        <br />
        <hr />
    </div>
    <div id="formAdminFields" class="tab-pane fade">
        <div class="row">
            <div class="col-md-12">
                @if (!string.IsNullOrEmpty(Model.AdminContainer))
                {
                    <div id='builderAdminFields'></div>
                }
                else
                {
                    <div class="alert alert-info">
                        @T["No Admin Fields available."]
                    </div>
                }
            </div>
        </div>
    </div>
    <div id="publicComments" class="tab-pane fade">
        <br />
        <div id="PublicCommentsPanels">
        </div>
        <br />
        <div>
            @await Component.InvokeAsync("CommentField", new CommentFieldViewModel()
           {
               AttachFileHint = T["Attach a file with comment"], AttachmentID = "publicAttachment", AttachRemoveHint = T["Remove Attachment"], AttachRemoveID = "publicAttachmentRemove",
               Editor = Model.PublicEditor, ErrorHint = T["Public comment required."], ErrorMessageClass = "errorMessagePublic", FileUploadID = "fileuploadPublic", EditorHint= T["These comments will be displayed to the submitter and are not private."]
           })
            <button class="publish-button btn btn-success" onclick="submitPublicComment('@Model.SubmissionId')">@T["Save"]</button>
        </div>
        <br />
        <br />
        <hr />
    </div>
</div>
<input type="hidden" asp-for="Id" form="main" />
<input type="hidden" asp-for="AdvancedFormId" form="main" />
<input type="hidden" asp-for="Owner" form="main" />
<input type="hidden" asp-for="Title" form="main" />
<input type="hidden" asp-for="Type" form="main" />
<input type="hidden" asp-for="Group" form="main" />
<input type="hidden" asp-for="Header" form="main" />
<input type="hidden" asp-for="Footer" form="main" />
<input type="hidden" asp-for="Container" form="main" />
<input type="hidden" asp-for="Description" form="main" />
<input type="hidden" asp-for="Instructions" form="main" />
<input type="hidden" asp-for="Container" form="main" />
<input type="hidden" asp-for="SubmissionId" form="main" />
<input type="hidden" asp-for="Submission" form="main" />
<input type="hidden" asp-for="AdminSubmission" form="main" />
<input type="hidden" asp-for="Metadata" form="main" />
<input type="hidden" asp-for="EntryType" form="main" />
<input type="hidden" asp-for="AdminContainer" form="main" />
<input type="hidden" asp-for="ApplicationLocation" form="main" />
<input type="hidden" asp-for="FormFields" form="main" />
<br />
<br />

<button form="main" type="submit" name="submit.Publish" class="publish-button btn btn-success" value="submit.Publish">@T["Publish"]</button>
<button form="main" type="submit" name="submit.Save" class="primaryAction btn btn-primary" value="submit.Save">@T["Save Draft"]</button>
<div class="loading">Loading&#8230;</div>


@{
    var returnUrl = Context.Request.Query["returnUrl"];
    <a id="button-cancel" href="@returnUrl" class="btn btn-secondary">@T["Cancel"]</a>
}
<input type="hidden" asp-for="Id" form="main" />

@if (Model.SelectedItems != null && Model.SelectedItems.Count > 0)
{
    var selectedItems = Html.Raw(JsonConvert.SerializeObject(Model.SelectedItems, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }));
    <script at="Foot">
        initializeContentPickerFieldEditor('ContentPicker_PickerAdvancedFormStatus_Status', @selectedItems, '', 'PickerAdvancedFormStatus', 'AdvancedFormStatus', false);
    </script>
}
else
{
    <script at="Foot">
        initializeContentPickerFieldEditor('ContentPicker_PickerAdvancedFormStatus_Status', [], '', 'PickerAdvancedFormStatus', 'AdvancedFormStatus', false);
    </script>
}