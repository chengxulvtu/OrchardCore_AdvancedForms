@model AdvancedForms.ViewModels.AdvancedFormViewModel
@using System.Web
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@* Css Files  *@
<style asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" debug-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" at="Head"></style>
<style asp-src="/AdvancedForms/Styles/formio.full.min.css"></style>
<style asp-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" debug-src="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"></style>
<style name="trumbowyg" asp-src="/OrchardCore.Resources/Styles/trumbowyg.min.css" debug-src="/OrchardCore.Resources/Styles/trumbowyg.css"></style>
<style asp-src="/AdvancedForms/Styles/AdvancedForms.css"></style>
@* JS Files  *@
<script asp-src="/AdvancedForms/Scripts/formio.full.min.js" at="Head" asp-name="formio.full.min"></script>
<script asp-src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js" at="Head"></script>
<script asp-src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" at="Head"></script>
<script asp-src="/AdvancedForms/Scripts/AdvancedForms.js" at="Head" asp-name="AdvancedForms"></script>

@*the files cannot be moved or editor and picker will not work*@
<script name="trumbowyg" depends-on="admin" asp-src="/OrchardCore.Resources/Scripts/trumbowyg.min.js" debug-src="/OrchardCore.Resources/Scripts/trumbowyg.js" at="Foot"></script>
<script asp-src="/AdvancedForms/Scripts/contentPickerAF.js" asp-name="contentPicker" at="Foot" depends-on="vuejs, vuemultiselect"></script>
<script asp-src="https://vuejs.org/js/vue.min.js" debug-src="https://vuejs.org/js/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.js" asp-name="vuemultiselect" at="Foot"></script>
<style asp-src="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css"></style>
<script asp-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.min.js" debug-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.js" asp-name="sortable" at="Foot"></script>
<script asp-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.min.js" debug-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.js" asp-name="vuedraggable" depends-on="vuejs, sortable" at="Foot"></script>
<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>

<style>
    .disabledbutton {
        pointer-events: none;
        opacity: 0.4;
    }

    label {
        margin-bottom: 0px !important;
        padding-bottom: 10px;
    }

    div > label {
        padding-bottom: 0px;
    }

    .btn-group-sm > .btn, .btn-sm {
        padding: 2px 8px;
    }

    .custom-control-label {
        padding-left: 10px;
    }

        .custom-control-label::before {
            width: 1.5rem;
            height: 1.5rem;
        }

        .custom-control-label::after {
            width: 1.5rem;
            height: 1.5rem;
        }

    @@media (min-width: 768px) {
        .custom-control {
            margin-top: 25px;
        }
    }

    @@media (max-width: 768px) {
        .custom-control {
            margin-bottom: 25px;
        }
    }
</style>

@{
    var standardComp = "{display: displayType,components:formioComponents}";
    var standardAdminComp = "{components:[{type:well }]}";
    var isEdit = !String.IsNullOrEmpty(Model.Id);
    var createOrEdit = isEdit ? "Edit" : "Create";
    var displayType = "form";
    var renderAdminForm = "renderAdminForm()";
}

<script type='text/javascript' at="Head">
    window.onload = function () {
        let formioComponents;
        let well = "well";
        let displayType = "@displayType";
        let isEdit = '@isEdit';
        Formio.builder(document.getElementById('builder'),
        @if (String.IsNullOrEmpty(Model.Container)){
            @standardComp
        }
        else{
            @Html.Raw(Model.Container)
            if (Model.Container.Contains("\"display\":\"wizard\""))
            {
                displayType = "wizard";
            }
        }
        ).then(builderChange);
        displayType = "@displayType";
        activeButton(displayType);
        @if (isEdit && !String.IsNullOrEmpty(Model.AdminContainer)) {
            @renderAdminForm;
        }
    };

    function formIObyDisplayType(displayType) {
        activeButton(displayType);
        var formJsonElement = document.getElementById('formJson');
        var schema = JSON.parse(formJsonElement.innerText);
        formioComponents = schema.components;
        document.getElementById('Container').value = null;
        Formio.builder(document.getElementById('builder'),
        @standardComp
        ).then(builderChange);
    }
</script>

@if (isEdit && !String.IsNullOrEmpty(Model.AdminContainer))
{
    <script type='text/javascript' at="Head">
        function renderAdminForm() {
            Formio.createForm(document.getElementById('builderAdminFields'),
                @if (String.IsNullOrEmpty(Model.AdminContainer)){@standardAdminComp}
                    else{@Html.Raw(Model.AdminContainer)}
                ).then(function (form) {
                    form.submission = {
                        @if (!String.IsNullOrEmpty(Model.SubmissionId) && !String.IsNullOrEmpty(Model.AdminSubmission))
                        {
                            string adminsubmission = "data:" + Html.Raw(Model.AdminSubmission);
                            @Html.Raw(adminsubmission);
                        }
                    };
                    builderAdminFieldsChange(form);
                });
        }
    </script>
}


<h1>@T["Advanced Form Module"]</h1>
@{
    var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count > 0).ToList();
    if (errors.Count > 0)
    {
        <div class="validation-summary-errors" data-valmsg-summary="true">
            <ul>
                @foreach (var item in errors)
                {
                    <li><span class="field-validation-error">@item.Value.Errors[0].ErrorMessage.ToString()</span></li>
                }
            </ul>
        </div>
    }
}
<div class="validation-summary-errors" data-valmsg-summary="true" id="notifyError">
    <ul>
        <li id="TitleError"><span class="field-validation-error">@T["The Title field is Required."]</span></li>
        <li id="TagError"><span class="field-validation-error">@T["The Tag field is Required."]</span></li>
        <li id="DescriptionError"><span class="field-validation-error">@T["The Description field is required."]</span></li>
        <li id="ContainerError"><span class="field-validation-error">@T["Form components is Required."]</span></li>
    </ul>
</div>

<form enctype="multipart/form-data" asp-action="@createOrEdit" asp-route-returnUrl="@Model.ReturnUrl" method="post" id="main" onsubmit="return onFormSubmit(this)"></form>

<div>
    <label asp-for="Title">@T["Title"]</label>
    <input asp-for="Title" class="form-control content-preview-text content-caption-text" autofocus="autofocus" form="main" tabindex="1" />
    <span class="hint">@T["The title of the form."]</span>
    <br />
    <br />
</div>
<div class="row">
    <div class="col-md-6">
        <div style="margin-bottom: 2rem;">
            <label asp-for="Title">@T["Type"]</label>
            <div id="ContentPicker_PickerAdvancedFormTypes_Type" class="content-picker-default">
                <fieldset class="">
                    <ul class="list-group col-xl-12 content-picker-default__list" v-show="arrayOfItems.length" v-cloak>
                        <draggable v-model="arrayOfItems">
                            <li v-for="(item, i) in arrayOfItems"
                                class="list-group-item content-picker-default__list-item"
                                :key="item.contentItemId">
                                {{ item.displayText }} <span v-show="!item.hasPublished" class="text-muted small">(@T["Not published"])</span>
                                <input asp-for="Type" type="hidden" v-model="item.contentItemId" form="main" />
                                <div class="btn-group btn-group-sm float-right" role="group">
                                    <button v-on:click="remove(item)" type="button" class="btn btn-secondary content-picker-default__list-item__delete"><i class="fa fa-trash fa-sm" aria-hidden="true"></i></button>
                                </div>
                            </li>
                        </draggable>
                    </ul>
                </fieldset>
                <fieldset class="row">
                    <div class="col-xl-12">
                        <div id="multiselect_Div" :tabindex="2">
                            <vue-multiselect v-model="value" :options="options" track-by="contentItemId"
                                             label="displayText" placeholder="@T["Type to search"]"
                                             @@search-change="asyncFind" @@select="onSelect"
                                             :searchable="true" :close-on-select="true" :reset-after="true"
                                             :show-labels="true"
                                             :disabled="isDisabled"
                                             select-label="@T["Select"]" deselect-label="@T["Remove"]">
                                <template slot="option" slot-scope="props">
                                    <div v-cloak><span>{{ props.option.displayText }}</span><span class="small ml-2" v-show="!props.option.hasPublished">(@T["Not published"])</span></div>
                                </template>
                            </vue-multiselect>
                        </div>
                    </div>
                    <div class="col-xl-12">
                        <span class="hint">@T["The type of the form."]</span>
                    </div>
                </fieldset>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="custom-control custom-checkbox mr-sm-2">
            <input asp-for="HideFromListing" type="checkbox" form="main" class="custom-control-input" id="customControlAutosizing">
            <label class="custom-control-label" for="customControlAutosizing"> @T["Hide From Listing"]</label>
        </div>
    </div>
</div>
<div class="description">
    <label asp-for="Description">@T["Description"]</label>
    <textarea asp-for="Description" class="form-control content-preview-text content-caption-text" form="main"></textarea>
    <span class="hint">@T["The Description of the form."]</span>
    <br />
    <br />
</div>
<div>
    <label asp-for="Instructions">@T["Instructions"]</label>
    <textarea asp-for="Instructions" class="form-control content-preview-text content-caption-text" form="main"></textarea>
    <span class="hint">@T["The instructions for the form."]</span>
    <br />
    <br />
</div>

<ul class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#formBuilder">@T["Form Builder"]</a></li>
    <li><a data-toggle="tab" href="#formPreview">@T["Preview"]</a></li>
    <li><a data-toggle="tab" href="#printTab">@T["Print"]</a></li>
    @if (isEdit)
    {
        <li><a data-toggle="tab" href="#adminFields">@T["Admin Fields"]</a></li>
    }
    <li><a data-toggle="tab" href="#subJsonTab">@T["Subumssion JSON"]</a></li>
    <li><a data-toggle="tab" href="#formJsonTab">@T["Form JSON"]</a></li>
</ul>

<div class="tab-content" style="border: 1px solid #ddd;padding: 15px;">
    <div id="formBuilder" class="tab-pane fade in active">
        <br />
        <div class="row">
            <div class="col-md-12" style="text-align: right;">
                <div class="btn-group btn-toggle" id="toggleDiv">
                    <button class="btn btn-info active" id="btnForm" onclick="formIObyDisplayType('form')">@T["Form"]</button>
                    <button class="btn btn-info" id="btnWizard" onclick="formIObyDisplayType('wizard')">@T["Wizard"]</button>
                </div>
            </div>
        </div>
        <div id='builder'></div>
    </div>
    <div id="formPreview" class="tab-pane fade">
        <br />
        <div id='formio'></div>
    </div>
    <div id="printTab" class="tab-pane fade">
        <br />

        <div>
            <div class="custom-control custom-checkbox mr-sm-2">
                <input asp-for="IsGlobalHeader" type="checkbox" form="main" class="custom-control-input" id="inputGlobalHeader">
                <label class="custom-control-label" for="inputGlobalHeader"> @T["Using Global Header"]</label>
            </div>
        </div>


        <div id="printHeader">
            <label asp-for="Header">@T["Header"]</label>
            <textarea asp-for="Header" class="form-control content-preview-text content-caption-text" form="main"></textarea>
            <span class="hint">@T["The Header for the form."]</span>
            <br />
            <br />
        </div>

        <div>
            <div class="custom-control custom-checkbox mr-sm-2">
                <input asp-for="IsGlobalFooter" type="checkbox" form="main" class="custom-control-input" id="inputGlobalFooter">
                <label class="custom-control-label" for="inputGlobalFooter"> @T["Using Global Footer"]</label>
            </div>
        </div>
        <div id="printFooter">
            <label asp-for="Footer">@T["Footer"]</label>
            <textarea asp-for="Footer" class="form-control content-preview-text content-caption-text" form="main"></textarea>
            <span class="hint">@T["The Footer for the form."]</span>
            <br />
            <br />
        </div>

    </div>
    <div id="subJsonTab" class="tab-pane fade">
        <br />
        <div class="card card-body bg-light jsonviewer">
            <pre id="subJson"></pre>
        </div>
    </div>
    @if (isEdit)
    {
        <div id="adminFields" class="tab-pane fade">
            <br />
            <div class="col-md-12">
                <a href="@Url.Action("Adminfields", "Admin", new { area = "AdvancedForms" })?contentItemId=@Model.Id&returnUrl=/AdvancedForms/Admin/Edit?ContentItemId=@Model.Id" class="btn btn-success pull-right" style="margin-bottom:7px;">Modify Admin Fields</a>
            </div>
            <div class="col-md-12">
                @if (!string.IsNullOrEmpty(Model.AdminContainer))
                {
                    <div id='builderAdminFields'></div>
                }
                else
                {
                    <div class="alert alert-info">
                        @T["No Admin Fields available."]
                    </div>
                }
            </div>
            <br />
        </div>
    }
    <div id="formJsonTab" class="tab-pane fade">
        <br />
        <div class="card card-body bg-light jsonviewer">
            <pre id="formJson"></pre>
        </div>
    </div>
</div>
<input type="hidden" asp-for="Container" form="main" />
<input type="hidden" asp-for="AdminContainer" form="main" />
<br />
<br />

<button form="main" type="submit" name="submit.Publish" class="publish-button btn btn-success" value="submit.Publish">@T["Publish"]</button>
<button form="main" type="submit" name="submit.Save" class="primaryAction btn btn-primary" value="submit.Save">@T["Save Draft"]</button>

@{
    var returnUrl = Context.Request.Query["returnUrl"];
    @if (isEdit && !String.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))
    {
        <a id="button-cancel" href="@returnUrl" class="btn btn-secondary">@T["Cancel"]</a>
    }
}
<input type="hidden" asp-for="Id" form="main" />


@if (Model.SelectedItems != null && Model.SelectedItems.Count > 0)
{
    var selectedItems = Html.Raw(JsonConvert.SerializeObject(Model.SelectedItems, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }));
    <script at="Foot">
        initializeContentPickerFieldEditorAF('ContentPicker_PickerAdvancedFormTypes_Type', @selectedItems, '', 'PickerAdvancedFormTypes', 'AdvancedFormTypes', false);
    </script>
}
else
{
    <script at="Foot">
        initializeContentPickerFieldEditorAF('ContentPicker_PickerAdvancedFormTypes_Type', [], '', 'PickerAdvancedFormTypes', 'AdvancedFormTypes', false);
    </script>
}

@if (Model.IsGlobalHeader)
{
    <script>
        $("#printHeader").addClass("disabledbutton");
    </script>
}

@if (Model.IsGlobalFooter)
{
    <script>
        $("#printFooter").addClass("disabledbutton");
    </script>
}


<script>
    $("#inputGlobalHeader").click(function () {
        if ($(this).is(":checked")) { $("#printHeader").addClass("disabledbutton"); }
        else { $("#printHeader").removeClass("disabledbutton"); }
    });

    $("#inputGlobalFooter").click(function () {
        if ($(this).is(":checked")) { $("#printFooter").addClass("disabledbutton"); }
        else { $("#printFooter").removeClass("disabledbutton"); }
    });

</script>
